1. Importación de la librería sqlite3

import sqlite3
sqlite3 es una librería incluida en Python para trabajar con bases de datos SQLite. No necesitas instalar nada adicional.
SQLite es un sistema de gestión de bases de datos que almacena la información en un solo archivo, lo que lo hace ideal para proyectos pequeños o medianos.

2. Conectar a la base de datos 

conn = sqlite3.connect('mi_base_de_datos.db')
cursor = conn.cursor()
sqlite3.connect('mi_base_de_datos.db'): Este comando conecta a una base de datos SQLite. Si el archivo 'mi_base_de_datos.db' no existe, se creará automáticamente.
cursor = conn.cursor(): Crea un cursor que es el objeto que permite ejecutar comandos SQL (como consultas, inserciones o la creación de tablas).

3. Crear las tablas
Cada cursor.execute() ejecuta una consulta SQL para crear una tabla en la base de datos. Vamos a ver cada tabla:

Tabla Region

cursor.execute('''
CREATE TABLE IF NOT EXISTS Region (
    id_Region INTEGER PRIMARY KEY,
    nom_Region TEXT
)
''')
Esta tabla almacena información sobre las regiones. Tiene dos columnas:
id_Region: Un número entero que es la clave primaria (PRIMARY KEY), es decir, identifica de forma única a cada región.
nom_Region: Una cadena de texto que almacena el nombre de la región.

Tabla Ciudades

cursor.execute('''
CREATE TABLE IF NOT EXISTS Ciudades (
    Id_Ciudad INTEGER PRIMARY KEY,
    Nom_Ciudad TEXT,
    id_Region INTEGER,
    FOREIGN KEY (id_Region) REFERENCES Region(id_Region)
)
''')
Almacena información sobre las ciudades. Tiene tres columnas:
Id_Ciudad: Clave primaria.
Nom_Ciudad: Nombre de la ciudad.
id_Region: Un número entero que hace referencia a la tabla Region. La relación entre las tablas se establece con FOREIGN KEY (clave foránea). Aquí, cada ciudad está vinculada a una región.

Tabla Usuarios

cursor.execute('''
CREATE TABLE IF NOT EXISTS Usuarios (
    id_Usuario INTEGER PRIMARY KEY,
    nombre TEXT,
    correo TEXT,
    contraseña INTEGER,
    direccion TEXT,
    telefono TEXT,
    id_Region INTEGER,
    id_Ciudad INTEGER,
    FOREIGN KEY (id_Ciudad) REFERENCES Ciudades(Id_Ciudad),
    FOREIGN KEY (id_Region) REFERENCES Region(id_Region)
)
''')
Almacena información de los usuarios. Tiene varias columnas:
id_Usuario: Clave primaria.
nombre, correo, contraseña, direccion, telefono: Información personal del usuario.
id_Region e id_Ciudad: Claves foráneas que hacen referencia a las tablas Region y Ciudades, respectivamente. Esto establece relaciones entre las tablas, indicando en qué ciudad y región vive el usuario.

Tabla Soporte

cursor.execute('''
CREATE TABLE IF NOT EXISTS Soporte (
    id_Soporte INTEGER PRIMARY KEY,
    id_Usuario INTEGER,
    id_Empresa INTEGER,
    FOREIGN KEY (id_Usuario) REFERENCES Usuarios(id_Usuario)
)
''')
Almacena solicitudes de soporte técnico. Se relaciona con:
id_Usuario: Hace referencia a la tabla Usuarios.
id_Empresa: Se vincula a la empresa (la tabla de empresas se crea después).

Tabla Termino_condiciones

cursor.execute('''
CREATE TABLE IF NOT EXISTS Termino_condiciones (
    id_Terminos INTEGER PRIMARY KEY,
    fecha_Actualizacion DATE,
    contenido_privacidad TEXT,
    version TEXT,
    id_Empresa INTEGER
)
''')
Almacena los términos y condiciones de la empresa. Tiene información sobre la última actualización, la versión y un campo para almacenar el contenido de privacidad.

Tabla Empresa

cursor.execute('''
CREATE TABLE IF NOT EXISTS Empresa (
    id_Empresa INTEGER PRIMARY KEY,
    nombre_Empresa TEXT,
    direccion TEXT,
    rut_Empresa TEXT,
    des_Empresa TEXT,
    id_Usuario INTEGER,
    FOREIGN KEY (id_Usuario) REFERENCES Usuarios(id_Usuario)
)
''')
Almacena información sobre empresas.
id_Usuario es una clave foránea que vincula un usuario con la empresa.

4. Otras tablas adicionales

Las demás tablas (Politica_Privacidad, Postulante, Registro_de_actividades, etc.) siguen una estructura similar: definen claves primarias y
claves foráneas que las vinculan con otras tablas para establecer relaciones. Algunas tienen campos adicionales que describen detalles específicos, como fechas,
descripciones o estados de algún proceso.

5. Confirmar los cambios y cerrar la conexión

conn.commit()
conn.close()
conn.commit(): Esto guarda todos los cambios que has hecho en la base de datos. Si no ejecutas este comando, las tablas no se crearán realmente.
conn.close(): Cierra la conexión con la base de datos para liberar los recursos. Es una buena práctica cerrar la conexión después de que termines de trabajar con la base de datos.
